services:
  # RabbitMQ - Message Broker (se levanta autom√°ticamente en local)
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: orders_rabbitmq
    ports:
      - "5672:5672"    # Puerto AMQP
      - "15672:15672"  # Management UI (http://localhost:15672 user: guest, pass: guest)
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orders_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # MongoDB - Database
  mongodb:
    image: mongo:7.0
    container_name: orders_mongodb
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_DATABASE: ordersdb
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orders_network
    volumes:
      - mongodb_data:/data/db

  # Orders Service - API REST
  orders_service:
    build: ./orders_service
    container_name: orders_service
    ports:
      - "8001:8000"
    environment:
      MONGODB_URL: mongodb://mongodb:27017/ordersdb
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://guest:guest@rabbitmq:5672/}
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - orders_network
    restart: unless-stopped

  # Notifications Service - Consumer
  notifications_service:
    build: ./notifications_service
    container_name: notifications_service
    environment:
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://guest:guest@rabbitmq:5672/}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - orders_network
    restart: unless-stopped

volumes:
  mongodb_data:
  rabbitmq_data:

networks:
  orders_network:
    driver: bridge
